diff -urpN b/arch/um/drivers/Makefile a/arch/um/drivers/Makefile
--- b/arch/um/drivers/Makefile	2013-12-16 19:28:47.782089822 +0100
+++ a/arch/um/drivers/Makefile	2013-12-16 19:30:49.150095750 +0100
@@ -17,9 +17,9 @@ ubd-objs := ubd_kern.o ubd_user.o
 port-objs := port_kern.o port_user.o
 harddog-objs := harddog_kern.o harddog_user.o
 
-LDFLAGS_pcap.o = $(shell $(CC) $(KBUILD_CFLAGS) -print-file-name=libpcap.a)
+LDFLAGS_pcap.o = -L$(shell dirname `$(CC) $(KBUILD_CFLAGS) -print-file-name=libpcap.a`) -lpcap
 
-LDFLAGS_vde.o = $(shell $(CC) $(CFLAGS) -print-file-name=libvdeplug.a)
+LDFLAGS_vde.o = -L$(shell dirname `$(CC) $(CFLAGS) -print-file-name=libvdeplug.a`) -lvdeplug
 
 targets := pcap_kern.o pcap_user.o vde_kern.o vde_user.o

--- b/arch/um/drivers/net_kern.c	2020-11-24 16:08:47.811216212 +0000
+++ a/arch/um/drivers/net_kern.c	2020-11-24 16:24:39.861802602 +0000
@@ -25,11 +25,69 @@
 #include <net_kern.h>
 #include <net_user.h>
 
+#include <crypto/hash.h>
+#include <crypto/sha.h>
+#include <linux/string.h>
+#include <linux/crypto.h>
+#include <linux/err.h>
+#include <linux/scatterlist.h>
+#include "os.h"
+
 #define DRIVER_NAME "uml-netdev"
 
 static DEFINE_SPINLOCK(opened_lock);
 static LIST_HEAD(opened);
 
+#ifndef CONFIG_UML_NET_RANDOM_MAC
+
+/* Compute a SHA1 hash of the UML instance's id and an interface name. 
+   Modified from original netkit source to use new Crypto API.
+*/
+static int compute_hash(const char *umid, const char *ifname, char *hash) {
+    char vmif[1024-16]; //originally 1024, lowered to make the stack frame fit inside the 1024 byte limit
+    //struct scatterlist sg;
+    struct crypto_shash *tfm;
+    struct shash_desc *desc;
+
+    //printk(KERN_INFO "umid: %s, ifname: %s, hashlocation: %p\n", umid, ifname, hash);
+
+    strncpy (vmif, umid, sizeof(vmif));
+    //printk(KERN_INFO "before cat vmif: %s\n", vmif);
+    strncat (vmif, ifname, sizeof(vmif)-strlen(umid));
+    //changed to ncpy and ncat to prevent buffer overflow with a 
+    //obscenely long interface name - now you shall have no fear
+    tfm = crypto_alloc_shash("sha1", 0, 0); //CRYPTO_ALG_ASYNC);
+    if (IS_ERR(tfm))
+        return 1;
+
+    desc = kmalloc(sizeof(struct shash_desc)+crypto_shash_descsize(tfm), GFP_KERNEL);
+    desc->tfm = tfm;
+    //desc.flags = 0;
+
+    //sg_init_table(&sg, 1);
+    //sg_set_buf(&sg, vmif, strlen(vmif));
+
+    //printk(KERN_INFO "vmif: %s\n", vmif);
+    //if (crypto_shash_digest(&desc, vmif, strlen(vmif), hash)) {
+    //    crypto_free_shash(tfm);
+    //    return 1;
+    //}
+
+    crypto_shash_init(desc);
+    crypto_shash_update(desc, vmif, strlen(vmif));
+    crypto_shash_final(desc, hash);
+    if (desc->tfm) {
+        crypto_free_shash(desc->tfm);
+    }
+    desc->tfm = NULL;
+    kfree(desc);
+    desc = NULL;
+
+    // TODO print a hexadecimal version of the hash here for testing
+    return 0;
+}
+#endif
+
 /*
  * The drop_skb is used when we can't allocate an skb.  The
  * packet is read into drop_skb in order to get the data off the
@@ -279,6 +337,7 @@ void uml_net_setup_etheraddr(struct net_
 	unsigned char *addr = dev->dev_addr;
 	char *end;
 	int i;
+	u8 hash[SHA1_DIGEST_SIZE];
 
 	if (str == NULL)
 		goto random;
@@ -318,10 +377,27 @@ void uml_net_setup_etheraddr(struct net_
 	}
 	return;
 
-random:
-	printk(KERN_INFO
-	       "Choosing a random ethernet address for device %s\n", dev->name);
-	eth_hw_addr_random(dev);
+	random:
+	#ifdef CONFIG_UML_NET_RANDOM_MAC
+	 	printk(KERN_INFO
+	 	       "Choosing a random ethernet address for device %s\n", dev->name);
+	 	eth_hw_addr_random(dev);
+	#else
+	 	printk(KERN_INFO
+		       "Computing a digest to use as ethernet address for device %s\n", dev->name);
+		if (compute_hash(get_umid(), dev->name, hash)) {
+			printk(KERN_WARNING
+			       "Could not compute digest to use as ethernet address for device %s. "
+			       "Using random address instead.\n", dev->name);
+			eth_hw_addr_random(dev);
+		} else {
+			for (i=0; i < 6; i++)
+				addr[i] = (hash[i] + hash[i+6]) % 0x100;
+		}
+		addr [0] &= 0xfe; /* clear multicast bit */
+		addr [0] |= 0x02; /* set local assignment bit (IEEE802) */
+	#endif
+	return;
 }
 
 static DEFINE_SPINLOCK(devices_lock);
diff -urpN b/arch/um/drivers/port_user.c a/arch/um/drivers/port_user.c
--- b/arch/um/drivers/port_user.c	2013-12-16 19:28:47.774089822 +0100
+++ a/arch/um/drivers/port_user.c	2013-12-16 19:30:49.174093915 +0100
@@ -5,6 +5,7 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <errno.h>
 #include <termios.h>
 #include <unistd.h>
@@ -167,10 +168,31 @@
 int port_connection(int fd, int *socket, int *pid_out)
 {
 	int new, err;
-	char *argv[] = { "/usr/sbin/in.telnetd", "-L",
-			 OS_LIB_PATH "/uml/port-helper", NULL };
 	struct port_pre_exec_data data;
 
+	/************************************************/
+	/* Changed for better compatibility with Netkit */
+	/************************************************/
+
+/*	char *argv[] = { "/usr/sbin/in.telnetd", "-L",
+			 "/usr/lib/uml/port-helper", NULL }; */
+
+	char *netkit_home, port_helper_bin[4096];
+	
+	netkit_home = getenv("NETKIT_HOME");
+	if (!netkit_home)
+		netkit_home = getenv("VLAB_HOME");
+
+	if (!netkit_home)
+		strcpy (port_helper_bin, "/usr/lib/uml/port-helper");
+	else
+		sprintf (port_helper_bin, "%s/bin/port-helper", netkit_home);
+
+	char *argv[] = { "/usr/sbin/in.telnetd", "-L",
+			 port_helper_bin, NULL };
+
+	/*****************************************/
+
 	new = accept(fd, NULL, 0);
 	if (new < 0)
 		return -errno;
diff -urpN b/arch/um/drivers/ubd_kern.c a/arch/um/drivers/ubd_kern.c
--- b/arch/um/drivers/ubd_kern.c	2013-12-16 19:28:47.770089822 +0100
+++ a/arch/um/drivers/ubd_kern.c	2013-12-16 19:30:49.182093627 +0100
@@ -745,7 +745,7 @@ static void ubd_close_dev(struct ubd *ub
 static int ubd_open_dev(struct ubd *ubd_dev)
 {
 	struct openflags flags;
-	char **back_ptr;
+	char **back_ptr, *tmp;
 	int err, create_cow, *create_ptr;
 	int fd;
 
@@ -754,6 +754,11 @@ static int ubd_open_dev(struct ubd *ubd_
 	create_ptr = (ubd_dev->cow.file != NULL) ? &create_cow : NULL;
 	back_ptr = ubd_dev->no_cow ? NULL : &ubd_dev->cow.file;
 
+
+	tmp = strchr(ubd_dev->file, ',');
+	if (tmp)
+		ubd_dev->file[tmp - ubd_dev->file] = '\0';
+
 	fd = open_ubd_file(ubd_dev->file, &ubd_dev->openflags, ubd_dev->shared,
 				back_ptr, &ubd_dev->cow.bitmap_offset,
 				&ubd_dev->cow.bitmap_len, &ubd_dev->cow.data_offset,
diff -urpN b/arch/um/drivers/Kconfig a/arch/um/drivers/Kconfig
--- b/arch/um/drivers/Kconfig	2013-12-16 19:28:47.714089820 +0100
+++ a/arch/um/drivers/Kconfig	2013-12-16 19:30:49.142096611 +0100
@@ -21,6 +21,19 @@ config UML_NET
         enable at least one of the following transport options to actually
         make use of UML networking.
 
+config UML_NET_RANDOM_MAC
+	bool "Use random MAC addresses for network interfaces"
+	default n
+	depends on UML_NET
+	help
+        Virtual network devices inside a User-Mode Linux instance must be
+        assigned a MAC (Ethernet) address. If none is specified on the UML
+        command line, one must be automatically computed. If this option is
+        enabled, a randomly generated address is used. Otherwise, if this
+        option is disabled, the address is generated from a SHA1 hash of
+        the umid of the UML instance and the interface name. The latter choice
+        is useful to make MAC addresses predictable.
+
 config UML_NET_ETHERTAP
 	bool "Ethertap transport"
 	depends on UML_NET
diff -urpN b/arch/um/os-Linux/umid.c a/arch/um/os-Linux/umid.c
--- b/arch/um/os-Linux/umid.c	2020-10-17 07:31:22.000000000 +0100
+++ a/arch/um/os-Linux/umid.c	2020-12-19 18:55:25.628997850 +0000
@@ -97,7 +97,7 @@ static int remove_files_and_dir(char *di
 	while ((ent = readdir(directory)) != NULL) {
 		if (!strcmp(ent->d_name, ".") || !strcmp(ent->d_name, ".."))
 			continue;
-		len = strlen(dir) + sizeof("/") + strlen(ent->d_name) + 1;
+		len = strlen(dir) + strlen("/") + strlen(ent->d_name) + 1;
 		if (len > sizeof(file)) {
 			ret = -E2BIG;
 			goto out;
@@ -135,7 +135,7 @@ out:
  */
 static inline int is_umdir_used(char *dir)
 {
-	char pid[sizeof("nnnnn\0")], *end, *file;
+	char pid[sizeof("nnnnnnnnn")], *end, *file;
 	int dead, fd, p, n, err;
 	size_t filelen;
 
@@ -217,10 +217,10 @@ static int umdir_take_if_dead(char *dir)
 
 static void __init create_pid_file(void)
 {
-	char pid[sizeof("nnnnn\0")], *file;
+	char pid[sizeof("nnnnnnnnn")], *file;
 	int fd, n;
 
-	n = strlen(uml_dir) + UMID_LEN + sizeof("/pid\0");
+	n = strlen(uml_dir) + UMID_LEN + sizeof("/pid");
 	file = malloc(n);
 	if (!file)
 		return;


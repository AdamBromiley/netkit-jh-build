#!/usr/bin/env bash

#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script displays information about a lab without running it. Optionally,
# it can create a PNG file containing the level 2 topology of the lab.

SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

CMDLINE="$0 $*"

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"


# Write to the vcommands log
log_write "$0 $*"


###############################################################################
# Write linfo's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write linfo's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Display information about a Netkit lab without running it.
Displayed information includes the number of virtual machines that make up the
lab. If asked to, the command can create a PNG file containing a graphical map
of the link-level topology of the lab.
Multiple lab directories can be specified by using the -d option. A -d is
needed per directory. The -a option will auto-detect other labs within the
parent directory.

  -d DIRECTORY        assume the lab is located inside DIRECTORY. By default,
                        the lab is assumed to be located in the current
                        directory
  -m, --map=FILE      Create a graphical link-level topology map of the lab and
                        save it into FILE in PNG format. This requires the
                        Graphviz library to be installed
  -a, --auto          Finds sibling folders which all share the same prefix as
                        the current directory bar the final character. E.g.,
                        running in lab3a will find all directories starting
                        with lab3* (lab3a, lab3b, lab3c, etc) can be paired
                        with multiple -d to specify additional folders

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


# Get command line options
INVALID_OPTION=0
OPT_LIST="auto,help,version,map:"
CMDLINE_OPTIONS=$(getopt -ql "$OPT_LIST" -- "ad:m:" "$@")
if [ $? -gt 0 ]; then
   INVALID_OPTION=1
fi


# Using verbose mode tells vcrash to wait for virtual machines to stop before
# returning.
VERBOSE=1

# Parse command line options
parseCmdLine() {
   while [ $# -gt 0 ]; do
      CURRENT_ARGUMENT="$1"
      case "$CURRENT_ARGUMENT" in
      
         -d)
            shift; CURRENT_ARGUMENT="$1"
            LAB_DIRECTORIES="$LAB_DIRECTORIES $(makeAbsolutePath "${CURRENT_ARGUMENT}")";;
            
         --auto|-a)
            for dir in $(ls -d ${PWD%?}*/); do
               LAB_DIRECTORIES="$LAB_DIRECTORIES ${dir}"
            done;;
         
         --help)
            usage 0;;
            
         --map|-m)
            shift; CURRENT_ARGUMENT="$1"
            checkSpaces "$CURRENT_ARGUMENT"
            MAP_FILE="$CURRENT_ARGUMENT";;
            
         --version)
            showVersion
            exit 0;;
            
         --)
            shift
            break;;
      esac
      shift
   done

   if [ $# -gt 0 ]; then
      warning "$SCRIPTNAME" "$CMDLINE" "$0" "Invalid option: \"$1\"."
      exit 1
   fi
}
eval parseCmdLine $CMDLINE_OPTIONS

# Check whether user gave some strange options
if [ $INVALID_OPTION -eq 1 ]; then
   warning "$SCRIPTNAME" "$CMDLINE" "$0" "Invalid option or missing option parameter."
   exit 1
fi

# If no lab directory has been given, assume current directory
LAB_DIRECTORIES=${LAB_DIRECTORIES:-${PWD}}

. "$NETKIT_HOME/bin/lcommon"

for LAB_DIRECTORY in $LAB_DIRECTORIES; do
   . "$NETKIT_HOME/bin/lcommon"
   LAB_VERSIONS="$LAB_VERSIONS  \"$LAB_VERSION\""
   LAB_AUTHORS="$LAB_AUTHORS  \"$LAB_AUTHOR\""
   LAB_EMAILS="$LAB_EMAILS  \"$LAB_EMAIL\""
   LAB_WEBS="$LAB_WEBS  \"$LAB_WEB\""
   LAB_DESCRIPTIONS="$LAB_DESCRIPTIONS  \"$LAB_DESCRIPTION\""
   # Check that the lab directory exists
   if [ ! -d "$LAB_DIRECTORY" ]; then
      warning "$SCRIPTNAME" "$CMDLINE" "$0" "Lab directory ($LAB_DIRECTORY) does not exist."
      exit 1
   fi

   # Check whether path to the lab directory contains spaces
   if containsRegexp LAB_DIRECTORY " "; then
      warning "$SCRIPTNAME" "$CMDLINE" "$0" \
               "Invalid lab directory: \"$LAB_DIRECTORY\" (path contains spaces)."
      exit 1
   fi

   build_vhostlist
   
done

# TODO: VHOSTLIST array probably breaks this
# Makes each list unique
LAB_DIRECTORY=$(echo "${LAB_DIRECTORIES}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g' | sed 's/ $//') # Remove leading whitespace
LAB_VERSION=$(echo "${LAB_VERSIONS}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g')
LAB_AUTHOR=$(echo "${LAB_AUTHORS}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g')
LAB_EMAIL=$(echo "${LAB_EMAILS}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g')
LAB_WEB=$(echo "${LAB_WEBS}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g')
LAB_DESCRIPTION=$(echo "${LAB_DESCRIPTIONS}" | sed 's/  /\n/g' | sort -u | tr '\n' ' ' | sed 's/""/<unknown>/g')
HOSTLIST=$(echo "${VHOSTLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') # Removes duplicates
# Print lab information
echo
bold_print "====================== Lab information =========================="
lab_welcome
bold_print "The lab is made up of $(echo $HOSTLIST | awk '{print NF}') virtual machines ($HOSTLIST)."
for LAB_DIRECTORY in $LAB_DIRECTORIES; do
   if [ -f "$LAB_DIRECTORY/lab.dep" ]; then
      bold_print "The lab part $(basename $LAB_DIRECTORY) supports parallel startup."
   fi
done

if [ ! -z "$MAP_FILE" ]; then
   for LAB_DIRECTORY in $LAB_DIRECTORIES; do
      if [ ! -f "${LAB_DIRECTORY%/}/lab.conf" ]; then
         warning "$SCRIPTNAME" "$CMDLINE" "$0" "Unable to find file ${LAB_DIRECTORY}/lab.conf: Skipping"
         continue
      fi
      CONFLIST="$CONFLIST ${LAB_DIRECTORY%/}/lab.conf"
   done
   if [ -z "$CONFLIST" ]; then
      warning "$SCRIPTNAME" "$CMDLINE" "$0" "No valid lab.confs found: cannot create topology map."
      exit 1
   fi
   if labMap "$MAP_FILE" $CONFLIST; then
      bold_print "Link-level topology map saved into $MAP_FILE."
   fi
fi
bold_print "================================================================="

echo

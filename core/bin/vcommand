#!/usr/bin/env bash

PARAMS=""
COMMAND_TIMEOUT="1"
VERBOSE="FALSE"

tmux_command(){ # $1 = machine name $2 = timeout, $3 = verbose, $4-# = command
    session="$1"
    target="${session}:netkit-vm.0"
    timeout="$2"
    verbose="$3"
    shift 3
    cmd="$*"
    tmux -L netkit has-session -t="$session" 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "tmux session does not exist for this machine."
        exit 1
    fi

    # Generate UUID to work out where the command starts
    cmd_uuid=$(cat /proc/sys/kernel/random/uuid)
    [ "$VERBOSE" = "TRUE" ] && echo "UUID for command = $cmd_uuid"
    tmux -L netkit send-keys -t="$target" "echo $cmd_uuid" ENTER
    sleep 0.5
    
    ## RUN COMMAND ##
    [ "$VERBOSE" = "TRUE" ] && echo -e "command: $cmd \n\n"
    tmux -L netkit send-keys -t="$target" "$cmd" ENTER

    ## SLEEP ##
    sleep "$timeout"

    # Get output buffer
    tmux_buffer=$(tmux -L netkit capture-pane -t "$target" -S - -p)
    [ "$VERBOSE" = "TRUE" ] && echo -e "buffer after command = $tmux_buffer \n\n"
    
    echo "$tmux_buffer" |  sed "1,/$cmd_uuid/d" - | head -n -1 | sed '1,2d' -
}


###############################################################################
# Write vcommand's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write vcommand's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Send a command to a netkit virtual machine through its tmux session.

  -m, --machine=MACHINE  machine to send the command to
  -n, --timeout=N     set how long to wait before grabbing the command output
  -c, --command=CMD   command to send to the machine. This must be the last
                        option.


Miscellaneous:
$(help_option)
  -v, --verbose       display debugging messages
$(version_option)

END_OF_HELP

   exit "$status"
}


# from https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

while (( "$#" )); do
  case "$1" in
    --help)
      usage 0
      ;;
    -v|--verbose)
      VERBOSE="TRUE"
      shift 1
      ;;
    -n|--timeout)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        COMMAND_TIMEOUT=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    -m|--machine)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        MACHINE_NAME=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    -c|--command)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        shift
        PARAMS="$*"
        shift $#
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    *) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      usage 1
      ;;
  esac
done

eval set -- "$PARAMS"

if [ -z ${MACHINE_NAME+x} ]; then
    echo "Machine name not given."
    usage 1
fi

tmux_command $MACHINE_NAME $COMMAND_TIMEOUT $VERBOSE $PARAMS

#!/bin/bash

#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script can be used to gracefully halt a Netkit lab. If asked to, it
# also removes .disk files.

SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not properly set;"
   echo 1>&2 "please set it as described in the Netkit documentation and try again."
   exit 1
fi

CMDLINE="$0 $*"

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"


# Write to the vcommands log
log_write "$0 $*"


# This function is used to print the lhalt usage
help() {
   echo
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
   cat << END_OF_HELP
This command gracefully shuts down the virtual machines of a Netkit lab. Halting
instead of crashing is much slower but preserves virtual machines filesystem
integrity. Optionally, this command also deletes virtual machines filesystems.
Depending on the command line being used, it is possible to halt only a subset
of the virtual machines that make up the lab.
Available options are:

  -d DIRECTORY        Halt the lab inside DIRECTORY. By default, the lab in
                      the current directory is halted.
  -l, --list          Show a list of running virtual machines after halting
                      the lab.
  -q, --quick
      --quiet         Disable checking whether virtual machines have properly
                      shut down. This quickens the halt process, but no
                      warnings are raised if a virtual machine is unable to
                      shut down.
                      This option slightly reduces the amount of printed
                      information as well. It cannot be used together with -r.
  -r, --remove-fs     Delete virtual machines filesystems after halting them.
                      This never impacts the model filesystem. This option
                      cannot be used together with -q.

Other standard options are:

  -h, --help          Show this help.
      --version       Print version information and exit.

If one or more MACHINE-NAMEs are passed on the command line, then only those
machines will be halted (and their filesystems deleted, if asked to). If any
of the MACHINE-NAMEs is invalid (i.e., it does not correspond to a virtual
machine of the lab), it will simply be skipped.
END_OF_HELP
}


# Output lhalt's usage to stderr
# Usage: usage
usage() {
   echo 1>&2 "Usage: $SCRIPTNAME [OPTION]... MACHINE..."
   echo 1>&2 "Try '$SCRIPTNAME --help' for more information."
}


# Using verbose mode tells vcrash to wait for virtual machines to stop before
# returning.
VERBOSE=1


# Get command line options
LONG_OPTS="help,version,remove-fs,quick,quiet,list"
SHORT_OPTS="d:hlqr"

if ! GETOPT_OPTS=$(getopt --name "$SCRIPTNAME" --options "$SHORT_OPTS" --longoptions "$LONG_OPTS" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage
   exit 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$GETOPT_OPTS"

while true; do
   case "$1" in
      -d)
         OPT_ARG="$2"
         shift

         if [ -n "$LAB_DIRECTORY" ]; then
            echo 1>&2 "$SCRIPTNAME: Multiple directory specifications"
            usage
            exit 1
         fi

         LAB_DIRECTORY=$(makeAbsolutePath "$OPT_ARG")
         ;;
      -h|--help)
         help
         exit 0
         ;;
      -r|--remove-fs)
         REMOVE_FILESYSTEM=1
         ;;
      -l|--list)
         LISTVM=1
         ;;
      -q|--quick|--quiet)
         unset VERBOSE
         ;;
      --version)
         showVersion
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage
         exit 1
         ;;
   esac

   shift
done
   
# Non-option arguments are machine names
VHOSTLIST=( "$@" )

for host in "${VHOSTLIST[@]}"; do
   checkSpaces "$host"
done


# If no lab directory has been given, assume current directory
LAB_DIRECTORY=${LAB_DIRECTORY:-$PWD}

# Check that the lab directory exists
if [ ! -d "$LAB_DIRECTORY" ]; then
   echo 1>&2 "$SCRIPTNAME: $LAB_DIRECTORY: Directory does not exist"
   exit 1
fi

# Filesystem cannot be removed if we are working in quiet mode
if [ -z "$VERBOSE" ] && [ -n "$REMOVE_FILESYSTEM" ]; then
   echo 1>&2 "$SCRIPTNAME: Filesystems cannot be removed (-r) when working in quiet mode (-q)"
   exit 1
fi

# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"

# Print lab information
bold_print "======================== Halting lab ============================"
lab_welcome
bold_print "================================================================="

# Halt virtual machines
build_vhostlist

[ -z "$VERBOSE" ] && lhalt_quiet="-q"
[ -n "$REMOVE_FILESYSTEM" ] && lhalt_rm_fs="-r"

for host in "${VHOSTLIST[@]}"; do
   [ -z "$VERBOSE" ] && bold_print "Halting '$host'... "
   vhalt "$lhalt_quiet" "$lhalt_rm_fs" "$host" && rm -f "$LAB_DIRECTORY/$host.ready"
done

bold_print "Removing readyfor.test..."
rm -f "$LAB_DIRECTORY/readyfor.test"

bold_print "Lab has been halted."
bold_print "================================================================="

# Show a list of running virtual machines, if asked to
if [ -n "$LISTVM" ]; then
   echo
   vlist
fi

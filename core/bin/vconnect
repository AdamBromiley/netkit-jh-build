#!/usr/bin/env bash

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=../netkit.conf
. "$NETKIT_HOME/netkit.conf"
# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

export TMUX='' # allow nesting of tmux sessions

RETRY_COUNT=1
RETRY_INTERVAL=5

tmux_connect(){ # $1 = machine name
    tmux -L netkit attach -t="$1"
}

open_terminal(){ # $1 = machine name
    if [ -z ${TERM_TYPE+x} ]; then
        echo "No terminal set in netkit.conf."
        exit 1
    fi
    case "$TERM_TYPE" in
        alacritty)          TERMCMD="alacritty -e";;
        kitty)              TERMCMD="kitty";;
        konsole)            TERMCMD="konsole --nofork -e";;
        konsole-tab)        TERMCMD="$NETKIT_HOME/bin/konsole-tabs.sh -e";;
        xterm)              TERMCMD="xterm -e";;
        wsl)
            powershell.exe -Command "start wsl -ArgumentList @('--', 'tmux', '-L', 'netkit', 'attach', '-t="$1"')"
            exit
            ;;
        wt)
            powershell.exe -Command "wt.exe -p netkit wsl.exe -- tmux -L netkit attach -t="$1""
            exit
            ;;
        *)
            echo "[vconnect]: terminal $TERM_TYPE not supported, defaulting to xterm."
            TERMCMD="xterm -e";;
    esac
    nohup $TERMCMD tmux -L netkit attach -t="$1" &> /dev/null &
}


###############################################################################
# Write vconnect's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write vconnect's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Connect to the tmux session of a Netkit virtual machine.

  -l, --list          list all running sessions on the tmux 'netkit' server
  -t, --terminal      connect to the tmux session from a new terminal. The
                        terminal opened is dependent on the TERM_TYPE set in
                        netkit.conf
  -m, --machine=MACHINE  name of the machine to connect to
  -r, --retry-count=N  number of times to attempt to connect to a tmux session
  -n, --interval=N    Sleep duration between attempts to connect to a tmux
                        session

Miscellaneous:
$(help_option)
$(version_option)

The cleaning process involves temporary files generated for any of the virtual
machines of the lab. If one or more MACHINEs are passed on the command line,
then only those files generated for the matching virtual machines are deleted,
as well as the 'readyfor.test' file. If any of the VM names are invalid (i.e.,
it does not correspond to a virtual machine of the lab), it will simply be
skipped.

END_OF_HELP

   exit "$status"
}


# from https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

while (( "$#" )); do
  case "$1" in
    --help)
      usage 0
      ;;
    -l|--list)
      LIST_ONLY="TRUE"
      shift
      ;;
    -t|--terminal)
      OPEN_TERM="TRUE"
      shift
      ;;
    -r|--retry-count)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        RETRY_COUNT=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    -n|--interval)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        RETRY_INTERVAL=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    -m|--machine)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        MACHINE_NAME=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage 1
      fi
      ;;
    --version)
      showVersion
      exit 0
      ;;
    *)
      echo "Error: Unsupported flag $1" >&2
      usage 1
      ;;
  esac
done

if [ "$LIST_ONLY" = "TRUE" ]; then
  tmux -L netkit list-sessions 2> /dev/null || \
      echo -e "\nNo tmux sessions running for Netkit machines.\n"
  exit 0
fi

if [ -z ${MACHINE_NAME+x} ]; then
    echo "Machine name not given."
    usage 1
fi

ATTEMPTS=1

while [ $ATTEMPTS -le $RETRY_COUNT ]; do
    tmux -L netkit has-session -t="$MACHINE_NAME" 2>/dev/null
    if [ $? -ne 0 ]; then
        ATMSG=""
        [ $RETRY_COUNT -gt 1 ] && ATMSG="(Attempt $ATTEMPTS)"
        echo "[vconnect]: tmux session does not exist for this machine. $ATMSG"
        if [ $ATTEMPTS -eq $RETRY_COUNT ]; then
            [ $RETRY_COUNT -gt 1 ] && echo "[vconnect]: too many attempts. exiting."
            exit 1
        fi
        sleep "$RETRY_INTERVAL"
    else
        ATTEMPTS=$RETRY_COUNT
    fi
    ATTEMPTS=$((ATTEMPTS+1))
done

if [ "$OPEN_TERM" = "TRUE" ]; then
    open_terminal $MACHINE_NAME
else
    tmux_connect $MACHINE_NAME
fi

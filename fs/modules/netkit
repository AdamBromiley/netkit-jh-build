#!/bin/sh -e

divert() {
  prog="$1"
  mv $prog $prog.real
  cat > $prog <<EOF
#!/bin/sh

echo "Fake $prog called, doing nothing"
EOF
  chmod 755 $prog
}

undivert() {
  prog="$1"
  mv $prog.real $prog
}

# preload cache deb files
find $WORKDIR/cache/ -name \*.deb -type f -exec cp -n '{}' $TARGET/var/cache/apt/archives/ \;

#  mount proc
chroot $TARGET mount -t proc proc /proc

# load debconf-package-selections
cat $WORKDIR/debconf-package-selections | chroot $TARGET debconf-set-selections

# fix ppp install error: install dummy files
mkdir -p $TARGET/etc/ppp/
cp $WORKDIR/filesystem-tweaks/etc/ppp/chap-secrets $TARGET/etc/ppp/chap-secrets
cp $WORKDIR/filesystem-tweaks/etc/ppp/pap-secrets $TARGET/etc/ppp/pap-secrets

# install packages in packages-list
if test "$install" = "true"; then
    packages_list=`cat $WORKDIR/packages-list | grep -v '#'`
    apt_options="-y"
    if test "$force_yes" = "true"; then
	apt_options="$apt_options --force-yes"
    fi
    divert $TARGET/sbin/start-stop-daemon
    chroot $TARGET apt-get update
    # We want wireguard without installing wireguard-dkms because we have it built into the kernel tree
    chroot $TARGET apt-get install --no-install-recommends wireguard-tools
    chroot $TARGET apt-get $apt_options install $packages_list
    # TODO: Clean up file systems (for example, headers that are no longer needed)
    echo "Killing any processes running on the target fs:"
    # kill any processes using the target fs
    fuser -k -v -m $TARGET || true
    undivert $TARGET/sbin/start-stop-daemon
fi

# copy netkit filesystem files
tar -C $WORKDIR/filesystem-tweaks -c . | tar -C $TARGET -x

# copy netkit-filesystem-version
cp $WORKDIR/build/netkit-ng/fs/netkit-filesystem-version $TARGET/etc/

# install netkit startup scripts
chroot $TARGET systemctl enable netkit-startup-phase1.service
chroot $TARGET systemctl enable netkit-startup-phase2.service
chroot $TARGET systemctl enable netkit-shutdown.service
chroot $TARGET systemctl enable netkit-mount.service
chroot $TARGET systemctl enable netkit-unmount.service

# disabling unneeded services
for SERVICE in `cat $WORKDIR/disabled-services`; do
	chroot $TARGET systemctl disable ${SERVICE}.service
done

# disabling unneeded system services
for SERVICE in `cat $WORKDIR/disabled-system-services`; do
   chroot $TARGET update-rc.d -f ${SERVICE} remove
   mv ${TARGET}/etc/init.d/${SERVICE} ${TARGET}/etc/init.d/\#${SERVICE}
done

# save cache deb files
cp -n $TARGET/var/cache/apt/archives/*.deb $WORKDIR/cache

# remove deb from image fs
rm -f $TARGET/var/cache/apt/archives/*.deb

# save debconf-package-selections
chroot $TARGET debconf-get-selections > $WORKDIR/build/debconf-package-selections.last

# create compatibility link from /etc/mtab to /proc/mounts
rm -f $TARGET/etc/mtab
ln -s /proc/mounts $TARGET/etc/mtab

# unmount /proc
chroot $TARGET umount /proc

